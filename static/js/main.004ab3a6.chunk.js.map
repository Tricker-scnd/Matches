{"version":3,"sources":["reducer/contracts/index.ts","components/common/MatchIcon.tsx","components/Header/index.tsx","context/index.ts","components/Players/PlayerStatsBlock/components/PlayerLog.tsx","components/Players/PlayerStatsBlock/index.tsx","components/Players/index.tsx","utils/index.ts","hooks/game.hook.ts","components/common/ChoseList.tsx","reducer/actions/index.ts","components/GameWindow/components/InGameScreen/components/GameActions/index.tsx","components/GameWindow/components/InGameScreen/components/GameStats/index.tsx","components/GameWindow/components/InGameScreen/index.tsx","components/GameWindow/components/DefaultScreen/index.tsx","components/common/SwitchButton.tsx","components/GameWindow/components/SettingsScreen/components/SettingRow.tsx","components/GameWindow/components/SettingsScreen/index.tsx","components/GameWindow/index.tsx","reducer/index.ts","hooks/context.hook.ts","App.tsx","index.tsx"],"names":["GameStatusTypes","GameResultTypes","GameTurnTypes","PlayersTypes","MatchIcon","size","iconSize","className","Header","React","memo","showSettingsHandler","gameInfo","gameStatus","INGAME","gameTurn","ME","onClick","GameContext","createContext","PlayerLog","oponent","playerLog","opp","map","action","i","PlayerStatsBlock","count","Players","useGameContext","useContext","playersInfo","PREPARE","playerScore","botScore","botLog","isEven","n","numWithModClassic","current","max","modZero","num","useGame","matchesInfo","handlers","botChose","setTimeout","currentMatchesCount","score","min","changedTotal","totalMatches","changedChose","maximumMatchesToChose","botChoseHandler","customStart","modSecond","modDelimetr","numWithModCustom","firstTurn","ENEMY","Math","round","random","ActionTypes","ChoseList","maxCount","currentCount","Array","fill","_","data-value","GameActions","sendChose","turn","useState","showChoseLine","setShowChoseLine","choseCount","setChoseCount","ChoseCheck","useCallback","t","zero","isNaN","e","target","classList","contains","Number","dataset","value","type","placeholder","onChange","GameStats","InGameScreen","useEffect","playerChose","DefaultScreen","gameStatusHandler","FINISHED","gameResult","WIN","restartGameHandler","SwitchButton","title","active","SettingRow","titleHint","groupField","children","SettingsScreen","errors","setErrors","setTotalMatches","setMaximumMatchesToChose","setFirstTurn","applySettings","settingsApplyHandler","GameWindow","showSettings","setShowSettings","applyMatchesChose","player","APPLY_MATCHES_CHOSE","payload","defaultGameState","NEVER","game","bot","settings","reducer","state","CHANGE_GAME_STATUS","CHANGE_GAME_RESULT","CHANGE_GAME_TURN","APPLY_SETTINGS","changes","PLAYER","BOT","LOSE","RESTART_GAME","useGameContextHook","useReducer","dispatch","status","gameTurnHandler","gameResultHandler","result","App","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.004ab3a6.chunk.js","sourcesContent":["export enum GameStatusTypes {\r\n  PREPARE = 'PREPARE',\r\n  INGAME = 'INGAME',\r\n  FINISHED = 'FINISHED',\r\n}\r\n\r\nexport enum GameResultTypes {\r\n  WIN = 'WIN',\r\n  LOSE = 'LOSE',\r\n  NEVER = 'NEVER',\r\n}\r\n\r\nexport enum GameTurnTypes {\r\n  ME = 'ME',\r\n  ENEMY = 'ENEMY',\r\n  NEVER = 'NEVER',\r\n}\r\n\r\nexport enum PlayersTypes {\r\n  PLAYER = 'PLAYER',\r\n  BOT = 'BOT',\r\n}\r\n\r\nexport interface GameState {\r\n  gameStatus: GameStatusTypes;\r\n  gameResult: GameResultTypes;\r\n  gameTurn: GameTurnTypes;\r\n  game: {\r\n    player: number;\r\n    bot: number;\r\n    playerLog: string[];\r\n    botLog: string[];\r\n  };\r\n  settings: {\r\n    totalMatches: number;\r\n    maximumMatchesToChose: number;\r\n    firstTurn: GameTurnTypes.ME | GameTurnTypes.ENEMY;\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\ninterface MatchIconProps {\r\n  size?: string;\r\n}\r\n\r\nexport const MatchIcon: React.FC<MatchIconProps> = ({ size = 'default' }) => {\r\n  const iconSize = size === 'big' ? 'icon--big' : size === 'small' ? 'icon--small' : '';\r\n  return (\r\n    <span className={`match-icon ${iconSize}`}>\r\n      <i>🔥</i>\r\n      <i></i>\r\n    </span>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { GameContextInterface } from '../../context';\r\nimport { GameStatusTypes, GameTurnTypes } from '../../reducer/contracts';\r\nimport { MatchIcon } from '../common/MatchIcon';\r\n\r\ninterface HeaderProps {\r\n  showSettingsHandler: Function;\r\n  gameInfo: GameContextInterface['gameInfo'];\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = React.memo(({ showSettingsHandler, gameInfo }) => {\r\n  return (\r\n    <div className=\"game-header\">\r\n      <div className=\"game-header__title\">\r\n        {gameInfo.gameStatus !== GameStatusTypes.INGAME ? (\r\n          <>\r\n            <h3 className=\"\">Начните играть</h3>\r\n            <MatchIcon size=\"small\" />\r\n          </>\r\n        ) : gameInfo.gameTurn === GameTurnTypes.ME ? (\r\n          <h3 className=\"your-turn\">Ваш ход</h3>\r\n        ) : (\r\n          <h3 className=\"enemy-turn\">\r\n            Ход соперника <span className=\"time-icon\">⌛</span>\r\n          </h3>\r\n        )}\r\n      </div>\r\n      <div className=\"game-header__action\">\r\n        <button className=\"btn btn--settings\" onClick={() => showSettingsHandler(true)}>\r\n          настройки ⚙️\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { GameResultTypes, GameStatusTypes, GameTurnTypes } from '../reducer/contracts';\r\n\r\nexport interface GameContextInterface {\r\n  handlers: {\r\n    gameStatusHandler: (t: GameStatusTypes) => void;\r\n    gameTurnHandler: (t: GameTurnTypes) => void;\r\n    gameResultHandler: (t: GameResultTypes) => void;\r\n    settingsApplyHandler: (\r\n      total: number,\r\n      max: number,\r\n      turn: GameTurnTypes.ME | GameTurnTypes.ENEMY,\r\n    ) => void;\r\n    restartGameHandler: () => void;\r\n    playerChose: (t: number) => void;\r\n    botChoseHandler: (t: number) => void;\r\n  };\r\n  playersInfo: {\r\n    playerScore: number;\r\n    botScore: number;\r\n    playerLog: string[];\r\n    botLog: string[];\r\n  };\r\n  gameInfo: {\r\n    gameStatus: GameStatusTypes;\r\n    gameResult: GameResultTypes;\r\n    gameTurn: GameTurnTypes;\r\n    firstTurn: GameTurnTypes.ME | GameTurnTypes.ENEMY;\r\n  };\r\n  matchesInfo: {\r\n    currentMatchesCount: number;\r\n    maximumMatchesToChose: number;\r\n    totalMatches: number;\r\n  };\r\n}\r\n\r\nexport type ContextState = {\r\n  useGameContext: GameContextInterface;\r\n};\r\n\r\nexport const GameContext = React.createContext<ContextState>({} as ContextState);\r\n","import React from 'react';\r\n\r\ninterface PlayerLogProps {\r\n  oponent?: boolean;\r\n  playerLog: string[];\r\n}\r\n\r\nexport const PlayerLog: React.FC<PlayerLogProps> = ({ oponent, playerLog }) => {\r\n  const opp = oponent ? 'bot' : 'player';\r\n  \r\n  return (\r\n    <div className=\"player-stats__log\">\r\n      {playerLog.map((action, i) => (\r\n        <div className=\"player-stats__action\" key={action + opp + i}>\r\n          {action}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MatchIcon } from '../../common/MatchIcon';\r\nimport { PlayerLog } from './components/PlayerLog';\r\n\r\ninterface PlayerStatsBlockProps {\r\n  oponent?: boolean;\r\n  count: number;\r\n  playerLog: string[];\r\n}\r\n\r\nexport const PlayerStatsBlock: React.FC<PlayerStatsBlockProps> = ({\r\n  oponent,\r\n  count,\r\n  playerLog,\r\n}) => {\r\n  return (\r\n    <>\r\n      {oponent ? (\r\n        <div className=\"players-container__column\">\r\n          <h4 className=\"oponent\">Соперник</h4>\r\n          <div className=\"player-stats__wrapper\">\r\n            <div className=\"player-stats-container\">\r\n              <MatchIcon />\r\n              <div className=\"player-stats__counter\">{count}</div>\r\n            </div>\r\n            <PlayerLog playerLog={playerLog} />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"players-container__column\">\r\n          <h4>Вы</h4>\r\n          <div className=\"player-stats__wrapper\">\r\n            <div className=\"player-stats-container\">\r\n              <MatchIcon />\r\n              <div className=\"player-stats__counter\">{count}</div>\r\n            </div>\r\n            <PlayerLog playerLog={playerLog} oponent />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GameContext } from '../../context';\r\nimport { GameStatusTypes } from '../../reducer/contracts';\r\nimport { PlayerStatsBlock } from './PlayerStatsBlock';\r\n\r\nexport const Players: React.FC = React.memo(() => {\r\n  const { useGameContext } = useContext(GameContext);\r\n  const { gameInfo, playersInfo } = useGameContext;\r\n\r\n  return (\r\n    <div className=\"players-container\">\r\n      {gameInfo.gameStatus !== GameStatusTypes.PREPARE && (\r\n        <>\r\n          <PlayerStatsBlock count={playersInfo.playerScore} playerLog={playersInfo.playerLog} />\r\n          <PlayerStatsBlock count={playersInfo.botScore} playerLog={playersInfo.botLog} oponent />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","export const randomInteger = (min: number, max: number) => {\r\n  return Math.round(min - 0.5 + Math.random() * (max - min + 1));\r\n};\r\nexport const isEven = (n: number) => {\r\n  return n % 2 === 0;\r\n};\r\n\r\nexport const numWithModClassic = (current: number, max: number) => {\r\n  // цель оставить число спичек, сравнимое с 0 или 1 по модулю 4.\r\n  let modZero = 0;\r\n  let modDelimetr = 4;\r\n\r\n  for (let num = 1; num <= max; num++) {\r\n    if (num % 2 !== 0) {\r\n      if ((current - num) % modDelimetr === 1) {\r\n        return num;\r\n      }\r\n      if ((current - num) % modDelimetr === 0) {\r\n        modZero = num;\r\n      }\r\n    }\r\n  }\r\n  return modZero;\r\n};\r\n\r\nexport const numWithModCustom = (\r\n  current: number,\r\n  max: number,\r\n  customStart: boolean = false,\r\n  botScore: number,\r\n) => {\r\n  // для нечетного max, цель оставить текущее число спичек, сравнимое с 0 или 1 по модулю 4\r\n  // для четного max, сравнимое с 0 или 1 по модулю 6 или число, сравнимое с 5 по модулю 6 в зависимости от четности botScore\r\n\r\n  let modSecond = 1;\r\n  let modDelimetr = max % 2 !== 0 ? 4 : 6;\r\n\r\n  if (modDelimetr === 4)\r\n    for (let num = 1; num <= max; num++) {\r\n      if (num % 2 !== 0 || customStart) {\r\n        if ((current - num) % modDelimetr === 0) {\r\n          return num;\r\n        }\r\n        if ((current - num) % modDelimetr === 1) {\r\n          modSecond = num;\r\n        }\r\n      }\r\n    }\r\n  else {\r\n    for (let num = 1; num <= max; num++) {\r\n      if (botScore % 2 === 0 || botScore === 0) {\r\n        if ((current - num) % modDelimetr === 1) {\r\n          return num;\r\n        }\r\n        if ((current - num) % modDelimetr === 0) {\r\n          modSecond = num;\r\n        }\r\n      } else {\r\n        if ((current - num) % modDelimetr === 5) {\r\n          return num;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return modSecond;\r\n};\r\n","import { useContext } from 'react';\r\nimport { GameContext } from '../context';\r\nimport { GameTurnTypes } from '../reducer/contracts';\r\nimport { isEven, numWithModClassic, numWithModCustom, randomInteger } from '../utils';\r\n\r\nexport default function useGame() {\r\n  const { useGameContext } = useContext(GameContext);\r\n  const { playersInfo, gameInfo, matchesInfo, handlers } = useGameContext;\r\n\r\n  const winCondition = (score: number, current: number) => {\r\n    if (current > matchesInfo.maximumMatchesToChose) {\r\n      let delta = current - matchesInfo.maximumMatchesToChose; //вычисление остатка при потенциальном выборе\r\n\r\n      if (delta === 1 && isEven(playersInfo.playerScore)) {\r\n        //пользователь остается с нечетным числом, победа бота\r\n        return matchesInfo.maximumMatchesToChose;\r\n      } else {\r\n        return numWithModClassic(current, matchesInfo.maximumMatchesToChose);\r\n      }\r\n    } else {\r\n      if (isEven(score + current)) return current; //Последний ход бота для победы\r\n      if (current !== 0) return current === 1 ? 1 : current - 1; //Последний ход бота для проигрыша\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const botChose = () => {\r\n    setTimeout(() => {\r\n      if (matchesInfo.currentMatchesCount === 0) return;\r\n      let num;\r\n\r\n      const changedTotal = ((matchesInfo.totalMatches - 1) / 2) % 4 !== 0;\r\n      const changedChose = matchesInfo.maximumMatchesToChose % 2 === 0;\r\n\r\n      //предпоследний и последний ход\r\n      if (matchesInfo.maximumMatchesToChose * 2 > matchesInfo.currentMatchesCount) {\r\n        num = winCondition(playersInfo.botScore, matchesInfo.currentMatchesCount);\r\n        handlers.botChoseHandler(num);\r\n        return;\r\n      }\r\n\r\n      //игра при измененных настройках\r\n      if (changedTotal || changedChose) {\r\n        num = numWithModCustom(\r\n          matchesInfo.currentMatchesCount,\r\n          matchesInfo.maximumMatchesToChose,\r\n          gameInfo.firstTurn === GameTurnTypes.ENEMY && playersInfo.botScore === 0,\r\n          playersInfo.botScore,\r\n        );\r\n        handlers.botChoseHandler(num);\r\n        return;\r\n      }\r\n\r\n      //игра при стандартных настройках\r\n      if (gameInfo.firstTurn === GameTurnTypes.ENEMY) {\r\n        num = randomInteger(matchesInfo.currentMatchesCount, matchesInfo.maximumMatchesToChose);\r\n      } else\r\n        num = numWithModClassic(matchesInfo.currentMatchesCount, matchesInfo.maximumMatchesToChose);\r\n      handlers.botChoseHandler(num);\r\n    }, 1500);\r\n  };\r\n\r\n  return { botChose };\r\n}\r\n","import React from 'react';\r\n\r\ninterface ChoseListProps {\r\n  maxCount: number;\r\n  currentCount: number;\r\n}\r\n\r\nexport const ChoseList: React.FC<ChoseListProps> = ({ maxCount, currentCount }) => {\r\n  return (\r\n    <>\r\n      {new Array(maxCount >= 10 ? 9 : maxCount).fill(0, 0).map((_, i) => (\r\n        <button\r\n          key={`btn${i}`}\r\n          className={`btn btn--num ${i + 1 > currentCount ? 'btn--no-active' : ''}`}\r\n          data-value={i + 1}>\r\n          {i + 1}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  GameResultTypes,\r\n  GameState,\r\n  GameStatusTypes,\r\n  GameTurnTypes,\r\n  PlayersTypes,\r\n} from '../contracts';\r\n\r\nexport enum ActionTypes {\r\n  CHANGE_GAME_STATUS = 'CHANGE_GAME_STATUS',\r\n  CHANGE_GAME_RESULT = 'CHANGE_GAME_RESULT',\r\n  CHANGE_GAME_TURN = 'CHANGE_GAME_TURN',\r\n  APPLY_SETTINGS = 'APPLY_SETTINGS',\r\n  APPLY_MATCHES_CHOSE = 'APPLY_MATCHES_CHOSE',\r\n  RESTART_GAME = 'RESTART_GAME',\r\n}\r\n\r\nexport const changeGameStatus = (payload: GameStatusTypes) => {\r\n  return {\r\n    type: ActionTypes.CHANGE_GAME_STATUS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const changeGameResult = (payload: GameResultTypes) => {\r\n  return {\r\n    type: ActionTypes.CHANGE_GAME_RESULT,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const changeGameTurn = (payload: GameTurnTypes) => {\r\n  return {\r\n    type: ActionTypes.CHANGE_GAME_TURN,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const restartGame = () => {\r\n  return {\r\n    type: ActionTypes.RESTART_GAME,\r\n  };\r\n};\r\n\r\nexport const settingsApply = (payload: GameState['settings']) => {\r\n  return {\r\n    type: ActionTypes.APPLY_SETTINGS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const applyMatchesChose = (num: number, player: PlayersTypes) => {\r\n  return {\r\n    type: ActionTypes.APPLY_MATCHES_CHOSE,\r\n    payload: { num, player },\r\n  };\r\n};\r\n\r\nexport interface GameActionsInterface {\r\n  type: ActionTypes;\r\n  payload?: any;\r\n}\r\n\r\nexport type GameActions = GameActionsInterface;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { GameTurnTypes } from '../../../../../../reducer/contracts';\r\nimport { ChoseList } from '../../../../../common/ChoseList';\r\n\r\ninterface GameActionsProps {\r\n  matchesInfo: {\r\n    currentMatchesCount: number;\r\n    maximumMatchesToChose: number;\r\n    totalMatches: number;\r\n  };\r\n  sendChose: (t: number) => void;\r\n  turn: GameTurnTypes;\r\n}\r\n\r\nexport const GameActions: React.FC<GameActionsProps> = ({ matchesInfo, sendChose, turn }) => {\r\n  const [showChoseLine, setShowChoseLine] = useState(false);\r\n  const [choseCount, setChoseCount] = useState(0);\r\n\r\n  const ChoseHandler = (e: any) => {\r\n    if (e.target.classList.contains('btn')) {\r\n      const num = Number(e.target.dataset.value);\r\n      if (ChoseCheck(num)) {\r\n        sendChose(num);\r\n        setShowChoseLine(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const ChoseCheck = useCallback(\r\n    (t: number, zero?: boolean) => {\r\n      if (!isNaN(t))\r\n        if (\r\n          t > (zero ? -1 : 0) &&\r\n          t <= matchesInfo.currentMatchesCount &&\r\n          t <= matchesInfo.maximumMatchesToChose\r\n        )\r\n          return true;\r\n      return false;\r\n    },\r\n    [matchesInfo.maximumMatchesToChose],\r\n  );\r\n\r\n  const typeChosehandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const num = Number(e.target.value);\r\n    ChoseCheck(num, true) && setChoseCount(num);\r\n  };\r\n\r\n  const choseApply = () => {\r\n    if (ChoseCheck(choseCount)) {\r\n      sendChose(choseCount);\r\n      setShowChoseLine(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"actions-block\">\r\n      <div className=\"actions-block__line action-line--first\">\r\n        <button\r\n          className={`btn ${showChoseLine || (turn !== GameTurnTypes.ME && 'btn--no-active')}`}\r\n          onClick={() => {\r\n            turn === GameTurnTypes.ME && setShowChoseLine(true);\r\n          }}>\r\n          Выбрать спички\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"actions-block__line\">\r\n        {showChoseLine && (\r\n          <>\r\n            <div className=\"actions-block__title\">Выберите кол-во спичек:</div>\r\n            <div className=\"actions-block__buttons-container\" onClick={ChoseHandler}>\r\n              <ChoseList\r\n                maxCount={matchesInfo.maximumMatchesToChose}\r\n                currentCount={matchesInfo.currentMatchesCount}\r\n              />\r\n              {matchesInfo.maximumMatchesToChose >= 10 && (\r\n                <>\r\n                  <label className=\"actions-block__label\">Либо введите число</label>\r\n                  <div className=\"actions-block__input-container\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"Введите число\"\r\n                      onChange={typeChosehandler}\r\n                      value={choseCount}\r\n                    />\r\n                    <button\r\n                      className={`btn btn--apply-chose ${choseCount === 0 && 'btn--no-active'}`}\r\n                      onClick={choseApply}>\r\n                      Принять\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MatchIcon } from '../../../../../common/MatchIcon';\r\n\r\ninterface GameStatsProps {\r\n  matchesInfo: {\r\n    currentMatchesCount: number;\r\n    maximumMatchesToChose: number;\r\n    totalMatches: number;\r\n  };\r\n}\r\n\r\nexport const GameStats: React.FC<GameStatsProps> = ({ matchesInfo }) => {\r\n  return (\r\n    <div className=\"matches-stats\">\r\n      <MatchIcon size=\"big\" />\r\n      <div className=\"matches-stats__counter\">\r\n        <span className=\"counter-item\">{matchesInfo.currentMatchesCount}</span>\r\n        <span className=\"counter-item\">/</span>\r\n        <span className=\"counter-item\">{matchesInfo.totalMatches}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {  useContext, useEffect } from 'react';\r\nimport useGame from '../../../../hooks/game.hook';\r\nimport { GameContext } from '../../../../context';\r\nimport { GameTurnTypes } from '../../../../reducer/contracts';\r\nimport { GameActions } from './components/GameActions';\r\nimport { GameStats } from './components/GameStats';\r\n\r\nexport const InGameScreen: React.FC = React.memo(() => {\r\n  const { useGameContext } = useContext(GameContext);\r\n  const { handlers, matchesInfo, gameInfo } = useGameContext;\r\n  const { botChose } = useGame();\r\n\r\n  useEffect(() => {\r\n    if (gameInfo.gameTurn === GameTurnTypes.ENEMY) botChose();\r\n  }, [gameInfo.gameTurn]);\r\n\r\n  return (\r\n    <div className=\"game-active__wrapper\">\r\n      <span className=\"limit-label\">\r\n        Лимит на выбор спичек: <b>{matchesInfo.maximumMatchesToChose} шт.</b>\r\n      </span>\r\n      <GameStats matchesInfo={matchesInfo} />\r\n      <GameActions\r\n        matchesInfo={matchesInfo}\r\n        sendChose={handlers.playerChose}\r\n        turn={gameInfo.gameTurn}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { GameContext } from '../../../../context';\r\nimport { GameResultTypes, GameStatusTypes } from '../../../../reducer/contracts';\r\n\r\nexport const DefaultScreen: React.FC = () => {\r\n  const { useGameContext } = useContext(GameContext);\r\n  const { handlers, gameInfo } = useGameContext;\r\n\r\n  return (\r\n    <div className=\"game-prepare__wrapper\">\r\n      {gameInfo.gameStatus === GameStatusTypes.PREPARE ? (\r\n        <button className=\"btn\" onClick={() => handlers.gameStatusHandler(GameStatusTypes.INGAME)}>\r\n          Начать игру\r\n        </button>\r\n      ) : (\r\n        gameInfo.gameStatus === GameStatusTypes.FINISHED && (\r\n          <div className=\"game-result__container\">\r\n            {gameInfo.gameResult === GameResultTypes.WIN ? (\r\n              <h3 className=\"win\">Победа !</h3>\r\n            ) : (\r\n              <h3 className=\"lose\">Поражение</h3>\r\n            )}\r\n            <button\r\n              className=\"btn\"\r\n              onClick={() => {\r\n                handlers.gameStatusHandler(GameStatusTypes.INGAME);\r\n                handlers.restartGameHandler();\r\n              }}>\r\n              Начать заново\r\n            </button>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\ninterface SwitchButtonProps {\r\n  title: string;\r\n  active?: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const SwitchButton: React.FC<SwitchButtonProps> = ({ title, active = false, onClick }) => {\r\n  return (\r\n    <button className={`btn switch-btn ${active && 'switch-btn--active'}`} onClick={onClick}>\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\ninterface SettingRowProps {\r\n  title: string;\r\n  titleHint?: string;\r\n  groupField?: boolean;\r\n}\r\n\r\nexport const SettingRow: React.FC<SettingRowProps> = ({\r\n  title,\r\n  titleHint,\r\n  groupField,\r\n  children,\r\n}) => {\r\n  return (\r\n    <div className=\"settings__row\">\r\n      <div className=\"settings__row--title\">\r\n        {title}\r\n        {titleHint && <span>({titleHint})</span>}\r\n      </div>\r\n      <div className={`settings__row--field ${groupField ? 'settings__row--group-field' : ''}`}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useCallback, useContext, useState } from 'react';\r\nimport { GameContext } from '../../../../context';\r\nimport { GameStatusTypes, GameTurnTypes } from '../../../../reducer/contracts';\r\nimport { SwitchButton } from '../../../common/SwitchButton';\r\nimport { SettingRow } from './components/SettingRow';\r\n\r\ninterface SettingsScreenProps {\r\n  showSettingsHandler: Function;\r\n}\r\n\r\nexport const SettingsScreen: React.FC<SettingsScreenProps> = ({ showSettingsHandler }) => {\r\n  const { useGameContext } = useContext(GameContext);\r\n  const { handlers, matchesInfo, gameInfo } = useGameContext;\r\n\r\n  const [errors, setErrors] = useState('');\r\n  const [totalMatches, setTotalMatches] = useState<number>(matchesInfo.totalMatches);\r\n  const [maximumMatchesToChose, setMaximumMatchesToChose] = useState<number>(\r\n    matchesInfo.maximumMatchesToChose,\r\n  );\r\n  const [firstTurn, setFirstTurn] = useState<GameTurnTypes.ME | GameTurnTypes.ENEMY>(\r\n    gameInfo.firstTurn,\r\n  );\r\n\r\n  const totalAmountHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const num = Number(e.target.value);\r\n    if (!isNaN(num)) num < 1001 && setTotalMatches(num);\r\n  };\r\n  const choseCountHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const num = Number(e.target.value);\r\n    if (!isNaN(num)) num < totalMatches && setMaximumMatchesToChose(num);\r\n  };\r\n\r\n  const applySettings = useCallback(() => {\r\n    if (maximumMatchesToChose + 1 >= totalMatches) {\r\n      setErrors('Выбор спичек за ход, должен быть значительно меньше!');\r\n      return;\r\n    }\r\n    if (maximumMatchesToChose < 3) {\r\n      setErrors('Минимальное количество на выбор 3');\r\n      return;\r\n    }\r\n    if (totalMatches < 25) {\r\n      setErrors('Минимальное количество 25 спичек');\r\n      return;\r\n    }\r\n    if (totalMatches % 2 === 0) {\r\n      setErrors('Максимальное количество спичек должно быть нечетным');\r\n      return;\r\n    }\r\n    setErrors('');\r\n    handlers.settingsApplyHandler(totalMatches, maximumMatchesToChose, firstTurn);\r\n    handlers.restartGameHandler();\r\n    showSettingsHandler(false);\r\n  }, [totalMatches, maximumMatchesToChose, firstTurn]);\r\n\r\n  return (\r\n    <div className=\"game-settings__wrapper\">\r\n      <button className=\"btn btn--close\" onClick={() => showSettingsHandler(false)}>\r\n        &times;\r\n      </button>\r\n      <h3 className=\"settings__title\">настройки</h3>\r\n      <div className=\"settings__body\">\r\n        <SettingRow title=\"Первый ход\" groupField>\r\n          <SwitchButton\r\n            title=\"Мой\"\r\n            active={firstTurn === GameTurnTypes.ME}\r\n            onClick={() => setFirstTurn(GameTurnTypes.ME)}\r\n          />\r\n          <SwitchButton\r\n            title=\"Соперника\"\r\n            active={firstTurn === GameTurnTypes.ENEMY}\r\n            onClick={() => setFirstTurn(GameTurnTypes.ENEMY)}\r\n          />\r\n        </SettingRow>\r\n\r\n        <SettingRow title=\"Максимальное количество спичек\" titleHint=\"только нечетное число\">\r\n          <input type=\"text\" value={totalMatches} onChange={totalAmountHandler} />\r\n          <span className=\"input-hint\">max:1000</span>\r\n        </SettingRow>\r\n\r\n        <SettingRow title=\"Максимум спичек можно взять за ход\">\r\n          <input type=\"text\" value={maximumMatchesToChose} onChange={choseCountHandler} />\r\n        </SettingRow>\r\n\r\n        <div className=\"settings__error-label\">{errors}</div>\r\n      </div>\r\n      <div className=\"settings__footer\">\r\n        <button className=\"btn btn--white\" onClick={applySettings}>\r\n          Применить {gameInfo.gameStatus !== GameStatusTypes.PREPARE && ' и начать заново'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useState } from 'react';\r\nimport { Header } from '../Header';\r\nimport { Players } from '../Players';\r\nimport { InGameScreen } from './components/InGameScreen';\r\nimport { DefaultScreen } from './components/DefaultScreen';\r\nimport { GameStatusTypes } from '../../reducer/contracts';\r\nimport { GameContext } from '../../context';\r\nimport { SettingsScreen } from './components/SettingsScreen';\r\n\r\nexport const GameWindow = () => {\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const { useGameContext } = useContext(GameContext);\r\n  const { gameInfo } =  useGameContext;\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <Header showSettingsHandler={setShowSettings} gameInfo={gameInfo} />\r\n\r\n      <div className=\"game-main-container\">\r\n        {gameInfo.gameStatus === GameStatusTypes.INGAME ? <InGameScreen /> : <DefaultScreen />}\r\n        {showSettings && <SettingsScreen showSettingsHandler={setShowSettings} />}\r\n      </div>\r\n\r\n      <Players />\r\n    </div>\r\n  );\r\n};\r\n","import { ActionTypes, GameActions } from './actions';\r\nimport {\r\n  GameResultTypes,\r\n  GameState,\r\n  GameStatusTypes,\r\n  GameTurnTypes,\r\n  PlayersTypes,\r\n} from './contracts';\r\n\r\nexport const defaultGameState: GameState = {\r\n  gameResult: GameResultTypes.NEVER,\r\n  gameStatus: GameStatusTypes.PREPARE,\r\n  gameTurn: GameTurnTypes.NEVER,\r\n  game: {\r\n    player: 0,\r\n    bot: 0,\r\n    playerLog: [],\r\n    botLog: [],\r\n  },\r\n  settings: {\r\n    totalMatches: 25,\r\n    maximumMatchesToChose: 3,\r\n    firstTurn: GameTurnTypes.ME,\r\n  },\r\n};\r\n\r\nexport default function reducer(state: GameState, action: GameActions) {\r\n\r\n  switch (action.type) {\r\n    case ActionTypes.CHANGE_GAME_STATUS:\r\n      if (action.payload === GameStatusTypes.INGAME)\r\n        return {\r\n          ...state,\r\n          gameStatus: action.payload,\r\n          gameTurn: state.settings.firstTurn,\r\n        };\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: action.payload,\r\n      };\r\n    case ActionTypes.CHANGE_GAME_RESULT:\r\n      return {\r\n        ...state,\r\n        gameStatus: GameStatusTypes.FINISHED,\r\n        gameResult: action.payload,\r\n      };\r\n\r\n    case ActionTypes.CHANGE_GAME_TURN:\r\n      return {\r\n        ...state,\r\n        gameTurn: action.payload,\r\n      };\r\n\r\n    case ActionTypes.APPLY_SETTINGS:\r\n      return {\r\n        ...state,\r\n        settings: {\r\n          ...action.payload,\r\n        },\r\n      };\r\n\r\n    case ActionTypes.APPLY_MATCHES_CHOSE:\r\n      const { num, player } = action.payload as { num: number; player: PlayersTypes };\r\n      \r\n      const changes = {\r\n        gameResult: state.gameResult,\r\n        gameStatus: state.gameStatus,\r\n        gameTurn: state.gameTurn,\r\n\r\n        playerScore: state.game.player,\r\n        botScore: state.game.bot,\r\n\r\n        playerLog: [...state.game.playerLog],\r\n        botLog: [...state.game.botLog],\r\n      };\r\n\r\n      if (player === PlayersTypes.PLAYER) {\r\n        changes.playerScore = state.game.player + action.payload.num;\r\n        changes.playerLog = [...state.game.playerLog, `Взял ${num}`];\r\n        changes.gameTurn = GameTurnTypes.ENEMY;\r\n      } else if (player === PlayersTypes.BOT) {\r\n        changes.botScore = state.game.bot + action.payload.num;\r\n        changes.botLog = [...state.game.botLog, `Взял ${num}`];\r\n        changes.gameTurn = GameTurnTypes.ME;\r\n      }\r\n\r\n      if (state.settings.totalMatches - changes.playerScore - changes.botScore <= 0) {\r\n        changes.gameStatus = GameStatusTypes.FINISHED;\r\n        if (changes.playerScore % 2 === 0) {\r\n          changes.gameResult = GameResultTypes.WIN;\r\n        } else {\r\n          changes.gameResult = GameResultTypes.LOSE;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: changes.gameStatus,\r\n        gameTurn: changes.gameTurn,\r\n        gameResult: changes.gameResult,\r\n        game: {\r\n          player: changes.playerScore,\r\n          playerLog: changes.playerLog,\r\n          bot: changes.botScore,\r\n          botLog: changes.botLog,\r\n        },\r\n      };\r\n\r\n    case ActionTypes.RESTART_GAME:\r\n      return {\r\n        gameResult: GameResultTypes.NEVER,\r\n        gameStatus: GameStatusTypes.INGAME,\r\n        gameTurn: state.settings.firstTurn,\r\n        game: {\r\n          player: 0,\r\n          bot: 0,\r\n          playerLog: [],\r\n          botLog: [],\r\n        },\r\n        settings: {\r\n          ...state.settings,\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { useReducer } from 'react';\r\nimport { GameContextInterface } from '../context';\r\nimport reducer, { defaultGameState } from '../reducer';\r\nimport {\r\n  applyMatchesChose,\r\n  changeGameResult,\r\n  changeGameStatus,\r\n  changeGameTurn,\r\n  restartGame,\r\n  settingsApply,\r\n} from '../reducer/actions';\r\nimport {\r\n  GameResultTypes,\r\n  GameStatusTypes,\r\n  GameTurnTypes,\r\n  PlayersTypes,\r\n} from '../reducer/contracts';\r\n\r\nexport default function useGameContextHook(): GameContextInterface {\r\n  const [state, dispatch] = useReducer(reducer, defaultGameState);\r\n\r\n  const handlers = {\r\n    gameStatusHandler: (status: GameStatusTypes) => {\r\n      dispatch(changeGameStatus(status));\r\n    },\r\n    gameTurnHandler: (turn: GameTurnTypes) => {\r\n      dispatch(changeGameTurn(turn));\r\n    },\r\n    gameResultHandler: (result: GameResultTypes) => {\r\n      dispatch(changeGameResult(result));\r\n    },\r\n    settingsApplyHandler: (\r\n      totalMatches: number,\r\n      maximumMatchesToChose: number,\r\n      firstTurn: GameTurnTypes.ME | GameTurnTypes.ENEMY,\r\n    ) => {\r\n      dispatch(\r\n        settingsApply({\r\n          totalMatches,\r\n          maximumMatchesToChose,\r\n          firstTurn,\r\n        }),\r\n      );\r\n    },\r\n    restartGameHandler: () => {\r\n      dispatch(restartGame());\r\n    },\r\n    playerChose: (num: number) => {\r\n      dispatch(applyMatchesChose(num, PlayersTypes.PLAYER));\r\n    },\r\n    botChoseHandler: (num: number) => {\r\n      dispatch(applyMatchesChose(num, PlayersTypes.BOT));\r\n    },\r\n  };\r\n\r\n  const matchesInfo = {\r\n    currentMatchesCount:\r\n      Number(state.settings.totalMatches) - (Number(state.game.player) + Number(state.game.bot)),\r\n    maximumMatchesToChose: state.settings.maximumMatchesToChose,\r\n    totalMatches: state.settings.totalMatches,\r\n  };\r\n\r\n  const playersInfo = {\r\n    playerScore: state.game.player,\r\n    botScore: state.game.bot,\r\n    playerLog: state.game.playerLog,\r\n    botLog: state.game.botLog,\r\n  };\r\n\r\n  const gameInfo = {\r\n    gameStatus: state.gameStatus,\r\n    gameResult: state.gameResult,\r\n    gameTurn: state.gameTurn,\r\n    firstTurn: state.settings.firstTurn,\r\n  };\r\n\r\n  return { handlers, matchesInfo, gameInfo, playersInfo };\r\n}\r\n","import React from 'react';\r\nimport { GameWindow } from './components/GameWindow';\r\nimport { GameContext } from './context';\r\nimport useGameContextHook from './hooks/context.hook';\r\n\r\nfunction App() {\r\n  const useGameContext = useGameContextHook();\r\n\r\n  return (\r\n    <GameContext.Provider value={{ useGameContext }}>\r\n      <div className=\"root-wrapper\">\r\n        <div className=\"main-window\">\r\n          <div className=\"main-window__wrapper\">\r\n            <GameWindow />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}