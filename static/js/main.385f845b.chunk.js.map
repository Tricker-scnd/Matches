{"version":3,"sources":["reducer/contracts/index.ts","reducer/actions/index.ts","components/common/MatchIcon.tsx","components/Header/index.tsx","components/Players/PlayerStatsBlock/components/PlayerLog.tsx","components/Players/PlayerStatsBlock/index.tsx","components/Players/index.tsx","gameHook/index.ts","context/index.ts","components/common/ChoseList.tsx","components/GameWindow/components/InGameScreen/components/GameActions/index.tsx","components/GameWindow/components/InGameScreen/components/GameStats/index.tsx","components/GameWindow/components/InGameScreen/index.tsx","components/GameWindow/components/DefaultScreen/index.tsx","reducer/index.ts","components/common/SwitchButton.tsx","components/GameWindow/components/SettingsScreen/components/SettingRow.tsx","components/GameWindow/components/SettingsScreen/index.tsx","components/GameWindow/index.tsx","App.tsx","index.tsx"],"names":["GameStatusTypes","GameResultTypes","GameTurnTypes","ActionTypes","MatchIcon","size","iconSize","className","Header","gameTurn","showSettingsHandler","gameStatus","INGAME","ME","onClick","PlayerLog","oponent","playerLog","opp","map","action","i","PlayerStatsBlock","count","Players","status","gameStats","PREPARE","player","bot","botLog","changeGameTurn","payload","type","CHANGE_GAME_TURN","restartGame","RESTART_GAME","isEven","n","useGame","state","dispatch","maximumToChose","settings","maximumMatchesToChose","current","game","currentMatchesCount","playerScore","botScore","botChose","setTimeout","num","min","max","score","rest","possibleNum","Math","round","random","BOT_CHOSE","checkGameResult","resultHandler","statusHandler","WIN","LOSE","FINISHED","GameContext","React","createContext","ChoseList","maxCount","currentCount","Array","fill","_","data-value","GameActions","matchesInfo","sendChose","turn","useState","showChoseLine","setShowChoseLine","choseCount","setChoseCount","ChoseCheck","t","zero","isNaN","e","target","classList","contains","Number","dataset","value","placeholder","onChange","GameStats","totalMatches","InGameScreen","gameStatusHandler","gameResultHandler","gameTurnHandler","useContext","useEffect","firstTurn","ENEMY","APPLY_MATCHES_CHOSE","DefaultScreen","restartGameHandler","result","defaultGameState","gameResult","NEVER","reducer","CHANGE_GAME_STATUS","CHANGE_GAME_RESULT","APPLY_SETTINGS","SwitchButton","title","active","SettingRow","titleHint","groupField","children","SettingsScreen","errors","setErrors","setTotalMatches","setMaximumMatchesToChose","setFirstTurn","GameWindow","useReducer","showSettings","setShowSettings","Provider","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mIAAYA,EAMAC,EAMAC,E,yDAZAF,K,kBAAAA,E,gBAAAA,E,qBAAAA,M,cAMAC,K,UAAAA,E,YAAAA,E,eAAAA,M,cAMAC,K,QAAAA,E,cAAAA,E,eAAAA,M,SCVAC,E,OCICC,EAAsC,SAAC,GAA0B,IAAD,IAAvBC,YAAuB,MAAhB,UAAgB,EACrEC,EAAoB,QAATD,EAAiB,YAAuB,UAATA,EAAmB,cAAgB,GACnF,OACE,uBAAME,UAAS,qBAAgBD,GAA/B,UACE,6CACA,0BCDOE,EAAgC,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,oBAAqBC,EAAiB,EAAjBA,WAC7E,OACE,sBAAKJ,UAAU,cAAf,UACE,qBAAKA,UAAU,qBAAf,SACGI,IAAeX,EAAgBY,OAC9B,qCACE,oBAAIL,UAAU,GAAd,6FACA,cAAC,EAAD,CAAWF,KAAK,aAEhBI,IAAaP,EAAcW,GAC7B,oBAAIN,UAAU,YAAd,mDAEA,qBAAIA,UAAU,aAAd,uFACgB,sBAAMA,UAAU,YAAhB,yBAIpB,qBAAKA,UAAU,sBAAf,SACE,wBAAQA,UAAU,oBAAoBO,QAAS,kBAAMJ,GAAoB,IAAzE,uFCrBKK,EAAsC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACvDC,EAAMF,EAAU,MAAQ,SAE9B,OACE,qBAAKT,UAAU,oBAAf,SACGU,EAAUE,KAAI,SAACC,EAAQC,GAAT,OACb,qBAAKd,UAAU,uBAAf,SACGa,GADwCA,EAASF,EAAMG,SCHrDC,EAAoD,SAAC,GAI3D,IAHLN,EAGI,EAHJA,QACAO,EAEI,EAFJA,MACAN,EACI,EADJA,UAEA,OACE,mCACGD,EACC,sBAAKT,UAAU,4BAAf,UACE,oBAAIA,UAAU,UAAd,8DACA,sBAAKA,UAAU,wBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,wBAAf,SAAwCgB,OAE1C,cAAC,EAAD,CAAWN,UAAWA,UAI1B,sBAAKV,UAAU,4BAAf,UACE,8CACA,sBAAKA,UAAU,wBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,wBAAf,SAAwCgB,OAE1C,cAAC,EAAD,CAAWN,UAAWA,EAAWD,SAAO,aC3BvCQ,EAAkC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACxD,OACE,qBAAKnB,UAAU,oBAAf,SACGkB,IAAWzB,EAAgB2B,SAC1B,qCACE,cAAC,EAAD,CAAkBJ,MAAOG,EAAUE,OAAQX,UAAWS,EAAUT,YAChE,cAAC,EAAD,CAAkBM,MAAOG,EAAUG,IAAKZ,UAAWS,EAAUI,OAAQd,SAAO,W,SLb1Eb,K,wCAAAA,E,wCAAAA,E,oCAAAA,E,gCAAAA,E,0CAAAA,E,sBAAAA,E,6BAAAA,M,KAUL,IAcM4B,EAAiB,SAACC,GAC7B,MAAO,CACLC,KAAM9B,EAAY+B,iBAClBF,QAASA,IAIAG,EAAc,WACzB,MAAO,CACLF,KAAM9B,EAAYiC,eM3BhBC,EAAS,SAACC,GACd,OAAOA,EAAI,IAAM,GAGJ,SAASC,EAAQC,EAA8BC,GAC5D,IAAMC,EAAiBF,EAAMG,SAASC,sBAChCC,EAAUL,EAAMM,KAAKC,oBACrBC,EAAcR,EAAMM,KAAKlB,OACzBqB,EAAWT,EAAMM,KAAKjB,IA6C5B,MAAO,CAAEqB,SAzBQ,WACfC,YAAW,WACT,GAAgB,IAAZN,EAAJ,CACA,IACIO,EApCaC,EAAaC,EAcZC,EAAeC,ENmCPxB,EMdpByB,EAAcf,GAAkBG,EAAUH,EAAiBG,EAE5C,EAAjBH,EAAqBG,GAvBPU,EAuBmCN,EAAnBG,GAvBDI,EAuB8BX,GAtBtDH,EAEK,IADFc,EAAOd,GACAL,EAAOW,GACjBN,EAEHL,EAAOY,EAAW,GACb,EAEF,EAGLZ,EAAOkB,EAAQC,GAAcA,EACpB,IAATA,EAA4B,IAATA,EAAa,EAAIA,EAAO,EAE1C,IA7BYH,EAsCQ,EAtCKC,EAsCFG,EAAvBL,EArCFM,KAAKC,MAAMN,EAAM,GAAMK,KAAKE,UAAYN,EAAMD,EAAM,KAuCvDZ,GNS0BT,EMTDoB,ENUtB,CACLnB,KAAM9B,EAAY0D,UAClB7B,QAASA,KMXPS,EAASV,EAAe7B,EAAcW,QACrC,OAeciD,gBAZK,SAACC,EAAyBC,GAChD,GAAgB,IAAZnB,EAOF,OANIR,EAAOW,GACTe,EAAc9D,EAAgBgE,KAE9BF,EAAc9D,EAAgBiE,WAEhCF,EAAchE,EAAgBmE,YC7C7B,IAAMC,EAAcC,IAAMC,cAA0B,MCJ9CC,EAAsC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAC9D,OACE,mCACG,IAAIC,MAAMF,GAAY,GAAK,EAAIA,GAAUG,KAAK,EAAG,GAAGxD,KAAI,SAACyD,EAAGvD,GAAJ,OACvD,wBAEEd,UAAS,uBAAkBc,EAAI,EAAIoD,EAAe,iBAAmB,IACrEI,aAAYxD,EAAI,EAHlB,SAIGA,EAAI,GAJP,aACaA,UCERyD,EAA0C,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAChF,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAmBMC,EAAa,SAACC,EAAWC,GAC7B,OAAKC,MAAMF,IAEPA,GAAKC,GAAQ,EAAI,IACjBD,GAAKT,EAAYhC,qBACjByC,GAAKT,EAAYnC,uBAWvB,OACE,sBAAKrC,UAAU,gBAAf,UACE,qBAAKA,UAAU,yCAAf,SACE,wBACEA,UAAS,cAAS4E,GAAkBF,IAAS/E,EAAcW,IAAM,kBACjEC,QAAS,WACPmE,IAAS/E,EAAcW,IAAMuE,GAAiB,IAHlD,+FASF,qBAAK7E,UAAU,sBAAf,SACG4E,GACC,qCACE,qBAAK5E,UAAU,uBAAf,oIACA,sBAAKA,UAAU,mCAAmCO,QAjDvC,SAAC6E,GACpB,GAAIA,EAAEC,OAAOC,UAAUC,SAAS,OAAQ,CACtC,IAAM1C,EAAM2C,OAAOJ,EAAEC,OAAOI,QAAQC,OAChCV,EAAWnC,KACb4B,EAAU5B,GACVgC,GAAiB,MA4Cb,UACE,cAAC,EAAD,CACEZ,SAAUO,EAAYnC,sBACtB6B,aAAcM,EAAYhC,sBAE3BgC,EAAYnC,uBAAyB,IACpC,qCACE,uBAAOrC,UAAU,uBAAjB,gHACA,sBAAKA,UAAU,iCAAf,UACE,uBACE0B,KAAK,SACLiE,YAAY,4EACZC,SAjCK,SAACR,GACxB,IAAMvC,EAAM2C,OAAOJ,EAAEC,OAAOK,OAC5BV,EAAWnC,GAAK,IAASkC,EAAclC,IAgCrB6C,MAAOZ,IAET,wBACE9E,UAAS,+BAAyC,IAAf8E,GAAoB,kBACvDvE,QAxDD,WACbyE,EAAWF,KACbL,EAAUK,GACVD,GAAiB,KAmDH,0ECvEPgB,EAAsC,SAAC,GAAqB,IAAnBrB,EAAkB,EAAlBA,YACpD,OACE,sBAAKxE,UAAU,gBAAf,UACE,cAAC,EAAD,CAAWF,KAAK,QAChB,sBAAKE,UAAU,yBAAf,UACE,sBAAMA,UAAU,eAAhB,SAAgCwE,EAAYhC,sBAC5C,sBAAMxC,UAAU,eAAhB,eACA,sBAAMA,UAAU,eAAhB,SAAgCwE,EAAYsB,sBCHvCC,EAA4C,SAAC,GAInD,IAHLC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,gBAEA,EAA4BC,qBAAWtC,GAA/B5B,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAETsC,EAAc,CAClBhC,oBAAqBP,EAAMM,KAAKC,oBAChCH,sBAAuBJ,EAAMG,SAASC,sBACtCyD,aAAc7D,EAAMG,SAAS0D,cAG/B,EAAsC9D,EAAQC,EAAOC,GAA7CS,EAAR,EAAQA,SAAUY,EAAlB,EAAkBA,gBAGlB6C,qBAAU,WACRF,EAAgBjE,EAAMG,SAASiE,aAC9B,IAGHD,qBAAU,WACR7C,EAAgB0C,EAAmBD,KAClC,CAACxB,EAAYhC,sBAGhB4D,qBAAU,WACJnE,EAAM/B,WAAaP,EAAc2G,OAAO3D,MAC3C,CAACV,EAAM/B,WAOV,OACE,sBAAKF,UAAU,uBAAf,UACE,uBAAMA,UAAU,cAAhB,8HACyB,8BAAIwE,EAAYnC,sBAAhB,uBAEzB,cAAC,EAAD,CAAWmC,YAAaA,IACxB,cAAC,EAAD,CAAaA,YAAaA,EAAaC,UAXzB,SAAC5B,GXCY,IAACpB,EWA9BS,EAASV,EAAe7B,EAAc2G,QACtCpE,GXD8BT,EWCHoB,EXAtB,CACLnB,KAAM9B,EAAY2G,oBAClB9E,QAASA,MWOsDiD,KAAMzC,EAAM/B,eC9ClEsG,EAA8C,SAAC,GAKrD,IAJLR,EAII,EAJJA,kBACAS,EAGI,EAHJA,mBACAvF,EAEI,EAFJA,OACAwF,EACI,EADJA,OAEA,OACE,qBAAK1G,UAAU,wBAAf,SACGkB,IAAWzB,EAAgB2B,QAC1B,wBAAQpB,UAAU,MAAMO,QAAS,kBAAMyF,EAAkBvG,EAAgBY,SAAzE,2EAIAa,IAAWzB,EAAgBmE,UACzB,sBAAK5D,UAAU,yBAAf,UACG0G,IAAWhH,EAAgBgE,IAC1B,oBAAI1D,UAAU,MAAd,oDAEA,oBAAIA,UAAU,OAAd,oEAEF,wBACEA,UAAU,MACVO,QAAS,WACPyF,EAAkBvG,EAAgBY,QAClCoG,KAJJ,6F,cC3BCE,EAA8B,CACzCC,WAAYlH,EAAgBmH,MAC5BzG,WAAYX,EAAgB2B,QAC5BlB,SAAUP,EAAckH,MACxBtE,KAAM,CACJC,oBAAqB,GACrBnB,OAAQ,EACRC,IAAK,EACLZ,UAAW,GACXa,OAAQ,IAEVa,SAAU,CACR0D,aAAc,GACdzD,sBAAuB,EACvBgE,UAAW1G,EAAcW,KAId,SAASwG,IAAmE,IAA3D7E,EAA0D,uDAAvC0E,EAAkB9F,EAAqB,uCACxF,OAAQA,EAAOa,MACb,KAAK9B,EAAYmH,mBACf,OAAO,2BACF9E,GADL,IAEE7B,WAAYS,EAAOY,UAEvB,KAAK7B,EAAYoH,mBACf,OAAO,2BACF/E,GADL,IAEE2E,WAAY/F,EAAOY,UAGvB,KAAK7B,EAAY+B,iBACf,OAAO,2BACFM,GADL,IAEE/B,SAAUW,EAAOY,UAGrB,KAAK7B,EAAYqH,eACf,OAAO,2BACFhF,GADL,IAEEG,SAAS,eACJvB,EAAOY,WAIhB,KAAK7B,EAAY2G,oBACf,OAAO,2BACFtE,GADL,IAEEM,KAAK,2BACAN,EAAMM,MADP,IAEFlB,OAAQY,EAAMM,KAAKlB,OAASR,EAAOY,QACnCf,UAAU,GAAD,mBAAMuB,EAAMM,KAAK7B,WAAjB,oCAAoCG,EAAOY,WACpDe,oBAAqBP,EAAMM,KAAKC,oBAAsB3B,EAAOY,YAInE,KAAK7B,EAAY0D,UACf,OAAO,2BACFrB,GADL,IAEEM,KAAK,2BACAN,EAAMM,MADP,IAEFjB,IAAKW,EAAMM,KAAKjB,IAAMT,EAAOY,QAC7BF,OAAO,GAAD,mBAAMU,EAAMM,KAAKhB,QAAjB,oCAAiCV,EAAOY,WAC9Ce,oBAAqBP,EAAMM,KAAKC,oBAAsB3B,EAAOY,YAInE,KAAK7B,EAAYiC,aACf,OAAO,2BACF8E,GADL,IAEEvG,WAAYX,EAAgBY,OAC5BH,SAAU+B,EAAMG,SAASiE,UACzB9D,KAAK,2BACAoE,EAAiBpE,MADlB,IAEFC,oBAAqBP,EAAMG,SAAS0D,eAEtC1D,SAAS,eACJH,EAAMG,YAIf,QACE,OAAOH,GC7EN,IAAMiF,EAA4C,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAqC,IAA9BC,cAA8B,SAAd7G,EAAc,EAAdA,QACjF,OACE,wBAAQP,UAAS,yBAAoBoH,GAAU,sBAAwB7G,QAASA,EAAhF,SACG4G,KCHME,EAAwC,SAAC,GAK/C,IAJLF,EAII,EAJJA,MACAG,EAGI,EAHJA,UACAC,EAEI,EAFJA,WACAC,EACI,EADJA,SAEA,OACE,sBAAKxH,UAAU,gBAAf,UACE,sBAAKA,UAAU,uBAAf,UACGmH,EACAG,GAAa,qCAAQA,EAAR,UAEhB,qBAAKtH,UAAS,+BAA0BuH,EAAa,6BAA+B,IAApF,SACGC,QCVIC,EAAgD,SAAC,GAA6B,IAA3BtH,EAA0B,EAA1BA,oBAC9D,EAA4BgG,qBAAWtC,GAA/B5B,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,EAA4ByC,mBAAS,IAArC,mBAAO+C,EAAP,KAAeC,EAAf,KACA,EAAwChD,mBAAiB1C,EAAMG,SAAS0D,cAAxE,mBAAOA,EAAP,KAAqB8B,EAArB,KACA,EAA0DjD,mBACxD1C,EAAMG,SAASC,uBADjB,mBAAOA,EAAP,KAA8BwF,EAA9B,KAGA,EAAkClD,mBAChC1C,EAAMG,SAASiE,WADjB,mBAAOA,EAAP,KAAkByB,EAAlB,KA2CA,OACE,sBAAK9H,UAAU,yBAAf,UACE,wBAAQA,UAAU,iBAAiBO,QAAS,kBAAMJ,GAAoB,IAAtE,kBAGA,oBAAIH,UAAU,kBAAd,oEACA,sBAAKA,UAAU,iBAAf,UACE,eAAC,EAAD,CAAYmH,MAAM,0DAAaI,YAAU,EAAzC,UACE,cAAC,EAAD,CACEJ,MAAM,qBACNC,OAAQf,IAAc1G,EAAcW,GACpCC,QAAS,kBAAMuH,EAAanI,EAAcW,OAE5C,cAAC,EAAD,CACE6G,MAAM,yDACNC,OAAQf,IAAc1G,EAAc2G,MACpC/F,QAAS,kBAAMuH,EAAanI,EAAc2G,aAI9C,eAAC,EAAD,CAAYa,MAAM,6KAAiCG,UAAU,uHAA7D,UACE,uBAAO5F,KAAK,OAAOgE,MAAOI,EAAcF,SA5DrB,SAACR,GAC1B,IAAMvC,EAAM2C,OAAOJ,EAAEC,OAAOK,OACvBP,MAAMtC,IAAMA,EAAM,MAAQ+E,EAAgB/E,MA2DzC,sBAAM7C,UAAU,aAAhB,yBAGF,cAAC,EAAD,CAAYmH,MAAM,sLAAlB,SACE,uBAAOzF,KAAK,OAAOgE,MAAOrD,EAAuBuD,SA7D/B,SAACR,GACzB,IAAMvC,EAAM2C,OAAOJ,EAAEC,OAAOK,OACvBP,MAAMtC,IAAMA,EAAMiD,GAAgB+B,EAAyBhF,QA8D5D,qBAAK7C,UAAU,wBAAf,SAAwC0H,OAE1C,qBAAK1H,UAAU,mBAAf,SACE,yBAAQA,UAAU,iBAAiBO,QA9DnB,WhBOK,IAACkB,EgBNtBY,EAAwB,GAAKyD,EAC/B6B,EAAU,+QAGRtF,EAAwB,EAC1BsF,EAAU,iLAGR7B,EAAe,EACjB6B,EAAU,0KAGR7B,EAAe,IAAM,GAKzB6B,EAAU,IACVzF,GhBZ0BT,EgBaV,CACZqE,eACAzD,wBACAgE,ahBfC,CACL3E,KAAM9B,EAAYqH,eAClBxF,QAASA,KgBgBTS,EAASN,KACTzB,GAAoB,IAblBwH,EAAU,8RAgDR,oEACa1F,EAAM7B,aAAeX,EAAgB2B,SAAW,6FC/ExD2G,EAAa,WACxB,MAA0BC,qBAAWlB,EAASH,GAA9C,mBAAO1E,EAAP,KAAcC,EAAd,KACA,EAAwCyC,oBAAS,GAAjD,mBAAOsD,EAAP,KAAqBC,EAArB,KAEMlC,EAAoB,SAAC9E,GjBRG,IAACO,EiBS7BS,GjBT6BT,EiBSHP,EjBRrB,CACLQ,KAAM9B,EAAYmH,mBAClBtF,QAASA,MiBmBX,OACE,cAACoC,EAAYsE,SAAb,CAAsBzC,MAAO,CAAExD,WAAUD,SAAzC,SACE,sBAAKjC,UAAU,OAAf,UACE,cAAC,EAAD,CACEE,SAAU+B,EAAM/B,SAChBC,oBAAqB+H,EACrB9H,WAAY6B,EAAM7B,aAGpB,sBAAKJ,UAAU,sBAAf,UACGiC,EAAM7B,aAAeX,EAAgBY,OACpC,cAAC,EAAD,CACE2F,kBAAmBA,EACnBC,kBArBc,SAACS,GjBPG,IAACjF,EiBQ7BS,GjBR6BT,EiBQHiF,EjBPrB,CACLhF,KAAM9B,EAAYoH,mBAClBvF,QAASA,KiBMTuE,EAAkBvG,EAAgBmE,WAoBxBsC,gBAzBY,SAACxB,GACvBxC,EAASV,EAAekD,KAyBdxD,OAAQe,EAAM7B,aAGhB,cAAC,EAAD,CACE4F,kBAAmBA,EACnBS,mBAxBe,WACzBvE,EAASN,MAwBCV,OAAQe,EAAM7B,WACdsG,OAAQzE,EAAM2E,aAIjBqB,GAAgB,cAAC,EAAD,CAAgB9H,oBAAqB+H,OAGxD,cAAC,EAAD,CAAShH,OAAQe,EAAM7B,WAAYe,UAAWc,EAAMM,aChD7C6F,MAZf,WACE,OACE,qBAAKpI,UAAU,eAAf,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,cAAC,EAAD,WCHVqI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.385f845b.chunk.js","sourcesContent":["export enum GameStatusTypes {\r\n  PREPARE = 'PREPARE',\r\n  INGAME = 'INGAME',\r\n  FINISHED = 'FINISHED',\r\n}\r\n\r\nexport enum GameResultTypes {\r\n  WIN = 'WIN',\r\n  LOSE = 'LOSE',\r\n  NEVER = 'NEVER',\r\n}\r\n\r\nexport enum GameTurnTypes {\r\n  ME = 'ME',\r\n  ENEMY = 'ENEMY',\r\n  NEVER = 'NEVER',\r\n}\r\n\r\n// export interface PlayerState {\r\n//   matchesCount: number;\r\n// }\r\n\r\nexport interface GameState {\r\n  gameStatus: GameStatusTypes;\r\n  gameResult: GameResultTypes;\r\n  gameTurn: GameTurnTypes;\r\n  game: {\r\n    currentMatchesCount: number;\r\n    player: number;\r\n    bot: number;\r\n    playerLog: string[];\r\n    botLog: string[];\r\n  };\r\n  settings: {\r\n    totalMatches: number;\r\n    maximumMatchesToChose: number;\r\n    firstTurn: GameTurnTypes.ME | GameTurnTypes.ENEMY;\r\n  };\r\n}\r\n","import { GameResultTypes, GameState, GameStatusTypes, GameTurnTypes } from '../contracts';\r\n\r\nexport enum ActionTypes {\r\n  CHANGE_GAME_STATUS = 'CHANGE_GAME_STATUS',\r\n  CHANGE_GAME_RESULT = 'CHANGE_GAME_RESULT',\r\n  CHANGE_GAME_TURN = 'CHANGE_GAME_TURN',\r\n  APPLY_SETTINGS = 'APPLY_SETTINGS',\r\n  APPLY_MATCHES_CHOSE = 'APPLY_MATCHES_CHOSE',\r\n  BOT_CHOSE = 'BOT_CHOSE',\r\n  RESTART_GAME = 'RESTART_GAME',\r\n}\r\n\r\nexport const changeGameStatus = (payload: GameStatusTypes) => {\r\n  return {\r\n    type: ActionTypes.CHANGE_GAME_STATUS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const changeGameResult = (payload: GameResultTypes) => {\r\n  return {\r\n    type: ActionTypes.CHANGE_GAME_RESULT,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const changeGameTurn = (payload: GameTurnTypes) => {\r\n  return {\r\n    type: ActionTypes.CHANGE_GAME_TURN,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const restartGame = () => {\r\n  return {\r\n    type: ActionTypes.RESTART_GAME,\r\n  };\r\n};\r\n\r\nexport const settingsApply = (payload: GameState['settings']) => {\r\n  return {\r\n    type: ActionTypes.APPLY_SETTINGS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const applyMatchesChose = (payload: number) => {\r\n  return {\r\n    type: ActionTypes.APPLY_MATCHES_CHOSE,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const botMatchesChose = (payload: number) => {\r\n  return {\r\n    type: ActionTypes.BOT_CHOSE,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport interface GameActionsInterface {\r\n  type: ActionTypes;\r\n  payload?: any;\r\n}\r\n\r\nexport type GameActions = GameActionsInterface;\r\n","import React from 'react';\r\n\r\ninterface MatchIconProps {\r\n  size?: string;\r\n}\r\n\r\nexport const MatchIcon: React.FC<MatchIconProps> = ({ size = 'default' }) => {\r\n  const iconSize = size === 'big' ? 'icon--big' : size === 'small' ? 'icon--small' : '';\r\n  return (\r\n    <span className={`match-icon ${iconSize}`}>\r\n      <i>🔥</i>\r\n      <i></i>\r\n    </span>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { GameStatusTypes, GameTurnTypes } from '../../reducer/contracts';\r\nimport { MatchIcon } from '../common/MatchIcon';\r\n\r\ninterface HeaderProps {\r\n  gameStatus: GameStatusTypes;\r\n  gameTurn: GameTurnTypes;\r\n  showSettingsHandler: Function;\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = ({ gameTurn, showSettingsHandler, gameStatus }) => {\r\n  return (\r\n    <div className=\"game-header\">\r\n      <div className=\"game-header__title\">\r\n        {gameStatus !== GameStatusTypes.INGAME ? (\r\n          <>\r\n            <h3 className=\"\">Начните играть</h3>\r\n            <MatchIcon size=\"small\" />\r\n          </>\r\n        ) : gameTurn === GameTurnTypes.ME ? (\r\n          <h3 className=\"your-turn\">Ваш ход</h3>\r\n        ) : (\r\n          <h3 className=\"enemy-turn\">\r\n            Ход соперника <span className=\"time-icon\">⌛</span>\r\n          </h3>\r\n        )}\r\n      </div>\r\n      <div className=\"game-header__action\">\r\n        <button className=\"btn btn--settings\" onClick={() => showSettingsHandler(true)}>\r\n          настройки ⚙️\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\ninterface PlayerLogProps {\r\n  oponent?: boolean;\r\n  playerLog: string[];\r\n}\r\n\r\nexport const PlayerLog: React.FC<PlayerLogProps> = ({ oponent, playerLog }) => {\r\n  const opp = oponent ? 'bot' : 'player';\r\n  \r\n  return (\r\n    <div className=\"player-stats__log\">\r\n      {playerLog.map((action, i) => (\r\n        <div className=\"player-stats__action\" key={action + opp + i}>\r\n          {action}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MatchIcon } from '../../common/MatchIcon';\r\nimport { PlayerLog } from './components/PlayerLog';\r\n\r\ninterface PlayerStatsBlockProps {\r\n  oponent?: boolean;\r\n  count: number;\r\n  playerLog: string[];\r\n}\r\n\r\nexport const PlayerStatsBlock: React.FC<PlayerStatsBlockProps> = ({\r\n  oponent,\r\n  count,\r\n  playerLog,\r\n}) => {\r\n  return (\r\n    <>\r\n      {oponent ? (\r\n        <div className=\"players-container__column\">\r\n          <h4 className=\"oponent\">Соперник</h4>\r\n          <div className=\"player-stats__wrapper\">\r\n            <div className=\"player-stats-container\">\r\n              <MatchIcon />\r\n              <div className=\"player-stats__counter\">{count}</div>\r\n            </div>\r\n            <PlayerLog playerLog={playerLog} />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"players-container__column\">\r\n          <h4>Вы</h4>\r\n          <div className=\"player-stats__wrapper\">\r\n            <div className=\"player-stats-container\">\r\n              <MatchIcon />\r\n              <div className=\"player-stats__counter\">{count}</div>\r\n            </div>\r\n            <PlayerLog playerLog={playerLog} oponent />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { GameState, GameStatusTypes } from '../../reducer/contracts';\r\nimport { PlayerStatsBlock } from './PlayerStatsBlock';\r\n\r\ninterface PlayersProps {\r\n  status: GameStatusTypes;\r\n  gameStats: GameState['game'];\r\n}\r\n\r\nexport const Players: React.FC<PlayersProps> = ({ status, gameStats }) => {\r\n  return (\r\n    <div className=\"players-container\">\r\n      {status !== GameStatusTypes.PREPARE && (\r\n        <>\r\n          <PlayerStatsBlock count={gameStats.player} playerLog={gameStats.playerLog} />\r\n          <PlayerStatsBlock count={gameStats.bot} playerLog={gameStats.botLog} oponent />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { ContextState } from '../context';\r\nimport { botMatchesChose, changeGameTurn } from '../reducer/actions';\r\nimport { GameResultTypes, GameStatusTypes, GameTurnTypes } from '../reducer/contracts';\r\n\r\nconst randomInteger = (min: number, max: number) => {\r\n  return Math.round(min - 0.5 + Math.random() * (max - min + 1));\r\n};\r\n\r\nconst isEven = (n: number) => {\r\n  return n % 2 === 0;\r\n};\r\n\r\nexport default function useGame(state: ContextState['state'], dispatch: ContextState['dispatch']) {\r\n  const maximumToChose = state.settings.maximumMatchesToChose;\r\n  const current = state.game.currentMatchesCount;\r\n  const playerScore = state.game.player;\r\n  const botScore = state.game.bot;\r\n\r\n  const winCondition = (score: number, rest: number) => {\r\n    if (rest > maximumToChose) {\r\n      let delta = rest - maximumToChose;\r\n      if (delta === 1 && isEven(playerScore)) {\r\n        return maximumToChose;\r\n      } else {\r\n        if (isEven(botScore + 1)) {\r\n          return 1;\r\n        }\r\n        return 2;\r\n      }\r\n    } else {\r\n      if (isEven(score + rest)) return rest;\r\n      if (rest !== 0) return rest === 1 ? 1 : rest - 1;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const botChose = () => {\r\n    setTimeout(() => {\r\n      if (current === 0) return;\r\n      const possibleNum = maximumToChose <= current ? maximumToChose : current;\r\n      let num;\r\n      if (maximumToChose * 2 > current) num = winCondition(botScore, current);\r\n      else num = randomInteger(1, possibleNum);\r\n\r\n      dispatch(botMatchesChose(num));\r\n      dispatch(changeGameTurn(GameTurnTypes.ME));\r\n    }, 1500);\r\n  };\r\n\r\n  const checkGameResult = (resultHandler: Function, statusHandler: Function) => {\r\n    if (current === 0) {\r\n      if (isEven(playerScore)) {\r\n        resultHandler(GameResultTypes.WIN);\r\n      } else {\r\n        resultHandler(GameResultTypes.LOSE);\r\n      }\r\n      statusHandler(GameStatusTypes.FINISHED);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return { botChose, checkGameResult };\r\n}\r\n","import React, { Dispatch } from 'react';\r\nimport { GameActions } from '../reducer/actions';\r\nimport { GameState } from '../reducer/contracts';\r\n\r\nexport type ContextState = {\r\n  state: GameState;\r\n  dispatch: Dispatch<GameActions>;\r\n};\r\n\r\ntype defContext = ContextState | null;\r\n\r\nexport const GameContext = React.createContext<defContext>(null);\r\n","import React from 'react';\r\n\r\ninterface ChoseListProps {\r\n  maxCount: number;\r\n  currentCount: number;\r\n}\r\n\r\nexport const ChoseList: React.FC<ChoseListProps> = ({ maxCount, currentCount }) => {\r\n  return (\r\n    <>\r\n      {new Array(maxCount >= 10 ? 9 : maxCount).fill(0, 0).map((_, i) => (\r\n        <button\r\n          key={`btn${i}`}\r\n          className={`btn btn--num ${i + 1 > currentCount ? 'btn--no-active' : ''}`}\r\n          data-value={i + 1}>\r\n          {i + 1}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React, {  useState } from 'react';\r\nimport { GameTurnTypes } from '../../../../../../reducer/contracts';\r\nimport { ChoseList } from '../../../../../common/ChoseList';\r\n\r\ninterface GameActionsProps {\r\n  matchesInfo: {\r\n    currentMatchesCount: number;\r\n    maximumMatchesToChose: number;\r\n    totalMatches: number;\r\n  };\r\n  sendChose: (t: number) => void;\r\n  turn: GameTurnTypes;\r\n}\r\n\r\nexport const GameActions: React.FC<GameActionsProps> = ({ matchesInfo, sendChose, turn }) => {\r\n  const [showChoseLine, setShowChoseLine] = useState(false);\r\n  const [choseCount, setChoseCount] = useState(0);\r\n\r\n  const ChoseHandler = (e: any) => {\r\n    if (e.target.classList.contains('btn')) {\r\n      const num = Number(e.target.dataset.value);\r\n      if (ChoseCheck(num)) {\r\n        sendChose(num);\r\n        setShowChoseLine(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const choseApply = () => {\r\n    if (ChoseCheck(choseCount)) {\r\n      sendChose(choseCount);\r\n      setShowChoseLine(false);\r\n    }\r\n  };\r\n\r\n  const ChoseCheck = (t: number, zero?: boolean) => {\r\n    if (!isNaN(t))\r\n      if (\r\n        t > (zero ? -1 : 0) &&\r\n        t <= matchesInfo.currentMatchesCount &&\r\n        t <= matchesInfo.maximumMatchesToChose\r\n      )\r\n        return true;\r\n    return false;\r\n  };\r\n\r\n  const typeChosehandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const num = Number(e.target.value);\r\n    ChoseCheck(num, true) && setChoseCount(num);\r\n  };\r\n\r\n  return (\r\n    <div className=\"actions-block\">\r\n      <div className=\"actions-block__line action-line--first\">\r\n        <button\r\n          className={`btn ${showChoseLine || (turn !== GameTurnTypes.ME && 'btn--no-active')}`}\r\n          onClick={() => {\r\n            turn === GameTurnTypes.ME && setShowChoseLine(true);\r\n          }}>\r\n          Выбрать спички\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"actions-block__line\">\r\n        {showChoseLine && (\r\n          <>\r\n            <div className=\"actions-block__title\">Выберите кол-во спичек:</div>\r\n            <div className=\"actions-block__buttons-container\" onClick={ChoseHandler}>\r\n              <ChoseList\r\n                maxCount={matchesInfo.maximumMatchesToChose}\r\n                currentCount={matchesInfo.currentMatchesCount}\r\n              />\r\n              {matchesInfo.maximumMatchesToChose >= 10 && (\r\n                <>\r\n                  <label className=\"actions-block__label\">Либо введите число</label>\r\n                  <div className=\"actions-block__input-container\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"Введите число\"\r\n                      onChange={typeChosehandler}\r\n                      value={choseCount}\r\n                    />\r\n                    <button\r\n                      className={`btn btn--apply-chose ${choseCount === 0 && 'btn--no-active'}`}\r\n                      onClick={choseApply}>\r\n                      Принять\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MatchIcon } from '../../../../../common/MatchIcon';\r\n\r\ninterface GameStatsProps {\r\n  matchesInfo: {\r\n    currentMatchesCount: number;\r\n    maximumMatchesToChose: number;\r\n    totalMatches: number;\r\n  };\r\n}\r\n\r\nexport const GameStats: React.FC<GameStatsProps> = ({ matchesInfo }) => {\r\n  return (\r\n    <div className=\"matches-stats\">\r\n      <MatchIcon size=\"big\" />\r\n      <div className=\"matches-stats__counter\">\r\n        <span className=\"counter-item\">{matchesInfo.currentMatchesCount}</span>\r\n        <span className=\"counter-item\">/</span>\r\n        <span className=\"counter-item\">{matchesInfo.totalMatches}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from 'react';\r\nimport useGame from '../../../../gameHook';\r\nimport { ContextState, GameContext } from '../../../../context';\r\nimport { applyMatchesChose, changeGameTurn } from '../../../../reducer/actions';\r\nimport { GameResultTypes, GameStatusTypes, GameTurnTypes } from '../../../../reducer/contracts';\r\nimport { GameActions } from './components/GameActions';\r\nimport { GameStats } from './components/GameStats';\r\n\r\ninterface InGameScreenProps {\r\n  gameStatusHandler: (s: GameStatusTypes) => void;\r\n  gameResultHandler: (s: GameResultTypes) => void;\r\n  gameTurnHandler: (s: GameTurnTypes) => void;\r\n  status: GameStatusTypes;\r\n}\r\n\r\nexport const InGameScreen: React.FC<InGameScreenProps> = ({\r\n  gameStatusHandler,\r\n  gameResultHandler,\r\n  gameTurnHandler,\r\n}) => {\r\n  const { state, dispatch } = useContext(GameContext) as ContextState;\r\n\r\n  const matchesInfo = {\r\n    currentMatchesCount: state.game.currentMatchesCount,\r\n    maximumMatchesToChose: state.settings.maximumMatchesToChose,\r\n    totalMatches: state.settings.totalMatches,\r\n  };\r\n\r\n  const { botChose, checkGameResult } = useGame(state, dispatch);\r\n\r\n  //PERVIY HOD\r\n  useEffect(() => {\r\n    gameTurnHandler(state.settings.firstTurn);\r\n  }, []);\r\n\r\n  //PROVERKA POBEDI\r\n  useEffect(() => {\r\n    checkGameResult(gameResultHandler, gameStatusHandler);\r\n  }, [matchesInfo.currentMatchesCount]);\r\n\r\n  //OTSLEZHIVANIE HODA\r\n  useEffect(() => {\r\n    if (state.gameTurn === GameTurnTypes.ENEMY) botChose();\r\n  }, [state.gameTurn]);\r\n\r\n  const sendChose = (num: number) => {\r\n    dispatch(changeGameTurn(GameTurnTypes.ENEMY));\r\n    dispatch(applyMatchesChose(num));\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-active__wrapper\">\r\n      <span className=\"limit-label\">\r\n        Лимит на выбор спичек: <b>{matchesInfo.maximumMatchesToChose} шт.</b>\r\n      </span>\r\n      <GameStats matchesInfo={matchesInfo} />\r\n      <GameActions matchesInfo={matchesInfo} sendChose={sendChose} turn={state.gameTurn} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { GameResultTypes, GameStatusTypes } from '../../../../reducer/contracts';\r\n\r\ninterface DefaultScreenProps {\r\n  gameStatusHandler: (s: GameStatusTypes) => void;\r\n  restartGameHandler: () => void;\r\n  status: GameStatusTypes;\r\n  result: GameResultTypes;\r\n}\r\n\r\nexport const DefaultScreen: React.FC<DefaultScreenProps> = ({\r\n  gameStatusHandler,\r\n  restartGameHandler,\r\n  status,\r\n  result,\r\n}) => {\r\n  return (\r\n    <div className=\"game-prepare__wrapper\">\r\n      {status === GameStatusTypes.PREPARE ? (\r\n        <button className=\"btn\" onClick={() => gameStatusHandler(GameStatusTypes.INGAME)}>\r\n          Начать игру\r\n        </button>\r\n      ) : (\r\n        status === GameStatusTypes.FINISHED && (\r\n          <div className=\"game-result__container\">\r\n            {result === GameResultTypes.WIN ? (\r\n              <h3 className=\"win\">Победа !</h3>\r\n            ) : (\r\n              <h3 className=\"lose\">Поражение</h3>\r\n            )}\r\n            <button\r\n              className=\"btn\"\r\n              onClick={() => {\r\n                gameStatusHandler(GameStatusTypes.INGAME);\r\n                restartGameHandler();\r\n              }}>\r\n              Начать заново\r\n            </button>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { ActionTypes, GameActions } from './actions';\r\nimport { GameResultTypes, GameState, GameStatusTypes, GameTurnTypes } from './contracts';\r\n\r\nexport const defaultGameState: GameState = {\r\n  gameResult: GameResultTypes.NEVER,\r\n  gameStatus: GameStatusTypes.PREPARE,\r\n  gameTurn: GameTurnTypes.NEVER,\r\n  game: {\r\n    currentMatchesCount: 25,\r\n    player: 0,\r\n    bot: 0,\r\n    playerLog: [],\r\n    botLog: [],\r\n  },\r\n  settings: {\r\n    totalMatches: 25,\r\n    maximumMatchesToChose: 3,\r\n    firstTurn: GameTurnTypes.ME,\r\n  },\r\n};\r\n\r\nexport default function reducer(state: GameState = defaultGameState, action: GameActions) {\r\n  switch (action.type) {\r\n    case ActionTypes.CHANGE_GAME_STATUS:\r\n      return {\r\n        ...state,\r\n        gameStatus: action.payload,\r\n      };\r\n    case ActionTypes.CHANGE_GAME_RESULT:\r\n      return {\r\n        ...state,\r\n        gameResult: action.payload,\r\n      };\r\n\r\n    case ActionTypes.CHANGE_GAME_TURN:\r\n      return {\r\n        ...state,\r\n        gameTurn: action.payload,\r\n      };\r\n\r\n    case ActionTypes.APPLY_SETTINGS:\r\n      return {\r\n        ...state,\r\n        settings: {\r\n          ...action.payload,\r\n        },\r\n      };\r\n\r\n    case ActionTypes.APPLY_MATCHES_CHOSE:\r\n      return {\r\n        ...state,\r\n        game: {\r\n          ...state.game,\r\n          player: state.game.player + action.payload,\r\n          playerLog: [...state.game.playerLog, `Взял ${action.payload}`],\r\n          currentMatchesCount: state.game.currentMatchesCount - action.payload,\r\n        },\r\n      };\r\n\r\n    case ActionTypes.BOT_CHOSE:\r\n      return {\r\n        ...state,\r\n        game: {\r\n          ...state.game,\r\n          bot: state.game.bot + action.payload,\r\n          botLog: [...state.game.botLog, `Взял ${action.payload}`],\r\n          currentMatchesCount: state.game.currentMatchesCount - action.payload,\r\n        },\r\n      };\r\n\r\n    case ActionTypes.RESTART_GAME:\r\n      return {\r\n        ...defaultGameState,\r\n        gameStatus: GameStatusTypes.INGAME,\r\n        gameTurn: state.settings.firstTurn,\r\n        game: {\r\n          ...defaultGameState.game,\r\n          currentMatchesCount: state.settings.totalMatches,\r\n        },\r\n        settings: {\r\n          ...state.settings,\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\ninterface SwitchButtonProps {\r\n  title: string;\r\n  active?: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const SwitchButton: React.FC<SwitchButtonProps> = ({ title, active = false, onClick }) => {\r\n  return (\r\n    <button className={`btn switch-btn ${active && 'switch-btn--active'}`} onClick={onClick}>\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\ninterface SettingRowProps {\r\n  title: string;\r\n  titleHint?: string;\r\n  groupField?: boolean;\r\n}\r\n\r\nexport const SettingRow: React.FC<SettingRowProps> = ({\r\n  title,\r\n  titleHint,\r\n  groupField,\r\n  children,\r\n}) => {\r\n  return (\r\n    <div className=\"settings__row\">\r\n      <div className=\"settings__row--title\">\r\n        {title}\r\n        {titleHint && <span>({titleHint})</span>}\r\n      </div>\r\n      <div className={`settings__row--field ${groupField ? 'settings__row--group-field' : ''}`}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useState } from 'react';\r\nimport { ContextState, GameContext } from '../../../../context';\r\nimport { restartGame, settingsApply } from '../../../../reducer/actions';\r\nimport { GameStatusTypes, GameTurnTypes } from '../../../../reducer/contracts';\r\nimport { SwitchButton } from '../../../common/SwitchButton';\r\nimport { SettingRow } from './components/SettingRow';\r\n\r\ninterface SettingsScreenProps {\r\n  showSettingsHandler: Function;\r\n}\r\n\r\nexport const SettingsScreen: React.FC<SettingsScreenProps> = ({ showSettingsHandler }) => {\r\n  const { state, dispatch } = useContext(GameContext) as ContextState;\r\n\r\n  const [errors, setErrors] = useState('');\r\n  const [totalMatches, setTotalMatches] = useState<number>(state.settings.totalMatches);\r\n  const [maximumMatchesToChose, setMaximumMatchesToChose] = useState<number>(\r\n    state.settings.maximumMatchesToChose,\r\n  );\r\n  const [firstTurn, setFirstTurn] = useState<GameTurnTypes.ME | GameTurnTypes.ENEMY>(\r\n    state.settings.firstTurn,\r\n  );\r\n\r\n  const totalAmountHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const num = Number(e.target.value);\r\n    if (!isNaN(num)) num < 1001 && setTotalMatches(num);\r\n  };\r\n  const choseCountHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const num = Number(e.target.value);\r\n    if (!isNaN(num)) num < totalMatches && setMaximumMatchesToChose(num);\r\n  };\r\n\r\n  const applySettings = () => {\r\n    if (maximumMatchesToChose + 1 >= totalMatches) {\r\n      setErrors('Выбор спичек за ход, должен быть значительно меньше!');\r\n      return;\r\n    }\r\n    if (maximumMatchesToChose < 2) {\r\n      setErrors('Минимальное количество на выбор 2');\r\n      return;\r\n    }\r\n    if (totalMatches < 5) {\r\n      setErrors('Минимальное количество 5 спичек');\r\n      return;\r\n    }\r\n    if (totalMatches % 2 === 0) {\r\n      setErrors('Максимальное количество спичек должно быть нечетным');\r\n      return;\r\n    }\r\n\r\n    setErrors('');\r\n    dispatch(\r\n      settingsApply({\r\n        totalMatches,\r\n        maximumMatchesToChose,\r\n        firstTurn,\r\n      }),\r\n    );\r\n    dispatch(restartGame());\r\n    showSettingsHandler(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-settings__wrapper\">\r\n      <button className=\"btn btn--close\" onClick={() => showSettingsHandler(false)}>\r\n        &times;\r\n      </button>\r\n      <h3 className=\"settings__title\">настройки</h3>\r\n      <div className=\"settings__body\">\r\n        <SettingRow title=\"Первый ход\" groupField>\r\n          <SwitchButton\r\n            title=\"Мой\"\r\n            active={firstTurn === GameTurnTypes.ME}\r\n            onClick={() => setFirstTurn(GameTurnTypes.ME)}\r\n          />\r\n          <SwitchButton\r\n            title=\"Соперника\"\r\n            active={firstTurn === GameTurnTypes.ENEMY}\r\n            onClick={() => setFirstTurn(GameTurnTypes.ENEMY)}\r\n          />\r\n        </SettingRow>\r\n\r\n        <SettingRow title=\"Максимальное количество спичек\" titleHint=\"только нечетное число\">\r\n          <input type=\"text\" value={totalMatches} onChange={totalAmountHandler} />\r\n          <span className=\"input-hint\">max:1000</span>\r\n        </SettingRow>\r\n\r\n        <SettingRow title=\"Максимум спичек можно взять за ход\">\r\n          <input type=\"text\" value={maximumMatchesToChose} onChange={choseCountHandler} />\r\n        </SettingRow>\r\n\r\n        <div className=\"settings__error-label\">{errors}</div>\r\n      </div>\r\n      <div className=\"settings__footer\">\r\n        <button className=\"btn btn--white\" onClick={applySettings}>\r\n          Применить {state.gameStatus !== GameStatusTypes.PREPARE && ' и начать заново'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useReducer, useState } from 'react';\r\nimport { Header } from '../Header';\r\nimport { Players } from '../Players';\r\nimport { InGameScreen } from './components/InGameScreen';\r\nimport { DefaultScreen } from './components/DefaultScreen';\r\nimport { GameResultTypes, GameStatusTypes, GameTurnTypes } from '../../reducer/contracts';\r\nimport { GameContext } from '../../context';\r\nimport reducer, { defaultGameState } from '../../reducer';\r\nimport {\r\n  changeGameResult,\r\n  changeGameStatus,\r\n  changeGameTurn,\r\n  restartGame,\r\n} from '../../reducer/actions';\r\nimport { SettingsScreen } from './components/SettingsScreen';\r\n\r\nexport const GameWindow = () => {\r\n  const [state, dispatch] = useReducer(reducer, defaultGameState);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n\r\n  const gameStatusHandler = (status: GameStatusTypes) => {\r\n    dispatch(changeGameStatus(status));\r\n  };\r\n  const gameTurnHandler = (turn: GameTurnTypes) => {\r\n    dispatch(changeGameTurn(turn));\r\n  };\r\n  const gameResultHandler = (result: GameResultTypes) => {\r\n    dispatch(changeGameResult(result));\r\n    gameStatusHandler(GameStatusTypes.FINISHED);\r\n  };\r\n  const restartGameHandler = () => {\r\n    dispatch(restartGame());\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{ dispatch, state }}>\r\n      <div className=\"game\">\r\n        <Header\r\n          gameTurn={state.gameTurn}\r\n          showSettingsHandler={setShowSettings}\r\n          gameStatus={state.gameStatus}\r\n        />\r\n\r\n        <div className=\"game-main-container\">\r\n          {state.gameStatus === GameStatusTypes.INGAME ? (\r\n            <InGameScreen\r\n              gameStatusHandler={gameStatusHandler}\r\n              gameResultHandler={gameResultHandler}\r\n              gameTurnHandler={gameTurnHandler}\r\n              status={state.gameStatus}\r\n            />\r\n          ) : (\r\n            <DefaultScreen\r\n              gameStatusHandler={gameStatusHandler}\r\n              restartGameHandler={restartGameHandler}\r\n              status={state.gameStatus}\r\n              result={state.gameResult}\r\n            />\r\n          )}\r\n\r\n          {showSettings && <SettingsScreen showSettingsHandler={setShowSettings} />}\r\n        </div>\r\n\r\n        <Players status={state.gameStatus} gameStats={state.game} />\r\n      </div>\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\nimport { GameWindow } from './components/GameWindow';\n\nfunction App() {\n  return (\n    <div className=\"root-wrapper\">\n      <div className=\"main-window\">\n        <div className=\"main-window__wrapper\">\n          <GameWindow />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}